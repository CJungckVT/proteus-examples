def repoUser, repoPassword, gradleOptions;

try
{
    properties[
        [$class: 'BuildDiscarderProperty', strategy:
            [$class: 'LogRotator', artifactDaysToKeepStr: '45', artifactNumToKeepStr: '5', daysToKeepStr: '90',
             numToKeepStr: '20']],
        [$class: 'ScannerJobProperty', doNotScan: false],
        [$class: 'GithubProjectProperty', displayName: 'Example Application',
            projectUrlStr: 'https://github.com/VentureTech/proteus-examples/'],
    ]

}
catch(error) {
    // Properties not supported for some job types
}

node {

    try
    {
        repoUser = repo_venturetech_username
        repoPassword = repo_venturetech_password
    }
    catch(error)
    {
        echo("Unable to get build parameter. Will try env. $error")
    }
    if(!repoUser) {
        // try environment
        echo("Checking env: ${env.repo_venturetech_username}")
        repoUser = env.repo_venturetech_username
        repoPassword = env.repo_venturetech_password
    }
    //noinspection LongLine
    gradleOptions= $/-Prepo_venturetech_username=$repoUser -Prepo_venturetech_password=$repoPassword -Pcompile_libraries=true --no-daemon/$


    def jdkHome = tool 'JDK 8'
    stage 'Checkout'

    // Get some code from a GitHub repository
    git url: 'https://github.com/VentureTech/proteus-examples.git'
    //checkout scm

    step([$class: 'GitHubSetCommitStatusBuilder', statusMessage: [content: 'Jenkins is building changes']])

    dir('example-app') {
        def gradleProps = readFile('gradle.properties')
        def isSnapshot = env.BRANCH_NAME?.equals('master') || env?.BRANCH_NAME.startsWith('release/')
        def appVersion = getAppVersion(gradleProps).replace('-SNAPSHOT', '')
        def appName = getAppName(gradleProps)
        echo "Building $appName $appVersion"
        def version = "${appVersion}.${currentBuild.number}${isSnapshot ? '-SNAPSHOT' : ''}"
        //noinspection GrReassignedInClosureLocalVar
        gradleOptions+=" -Papp_version=$version"
        currentBuild.displayName = "v${version}"
        stage "Build"
        gradleProps = null;
        withEnv(["JAVA_HOME=$jdkHome"]){
            // Run the build
            wrap([$class: 'AnsiColorBuildWrapper', 'colorMapName': 'css']) {
                sh "./gradlew clean assemble $gradleOptions"
            }
        }
        step([$class: 'ArtifactArchiver', artifacts: '**/build/gradle/libs/*', excludes: null,
              fingerprint: true, onlyIfSuccessful: true])
        step([$class: 'WarningsPublisher', canComputeNew: true, canResolveRelativePaths: false,
              consoleParsers: [[parserName: 'Java Compiler (javac)']], defaultEncoding: '',
              excludePattern: '', healthy: '', includePattern: '', messagesPattern: '', unHealthy: ''])
        step([$class: 'TasksPublisher', canComputeNew: true, defaultEncoding: '', excludePattern: '', healthy: '', high: 'FIXME',
              low: 'FUTURE', normal: 'TODO', pattern: 'src/**/*.java', unHealthy: ''])

        stash excludes: 'compiletime-aspects/**', name: 'example-app buildFiles'
    }
}
stage 'Tests In Parallel'
parallel(["Unit Tests": {
    node {
//        stage 'Unit Tests'
        def jdkHome = tool 'JDK 8'
        dir('example-app') {
            unstash 'example-app buildFiles'
            withEnv(["JAVA_HOME=$jdkHome"]) {
                // Run the build
                wrap([$class: 'AnsiColorBuildWrapper', 'colorMapName': 'css']) {
                    sh "./gradlew test $gradleOptions"
                }
            }
            step([$class: 'JUnitResultArchiver', allowEmptyResults: true, healthScaleFactor: 2.0,
                  keepLongStdio: true, testResults: '**/build/gradle/test-results//TEST*.xml'])

        }
    }
}, "Integration Tests": {

    node {
//        stage 'Integration Tests'
        def jdkHome = tool 'JDK 8'
        dir('example-app') {
            unstash 'example-app buildFiles'
            withEnv(["JAVA_HOME=$jdkHome"]) {
                // Run the build
                wrap([$class: 'AnsiColorBuildWrapper', 'colorMapName': 'css']) {
                    sh "./gradlew test -PtestGroups=integration $gradleOptions"
                }
            }
            step([$class: 'JUnitResultArchiver', allowEmptyResults: true, healthScaleFactor: 4.0,
                  keepLongStdio: true, testResults: '**/build/gradle/test-results/TEST*.xml'])

        }
    }
}, failFast: true])

node {
    stage 'Coding Convention Review'
    def jdkHome = tool 'JDK 8'
    dir('example-app') {
        unstash 'example-app buildFiles'
        withEnv(["JAVA_HOME=$jdkHome"]) {
            // Run the build
            wrap([$class: 'AnsiColorBuildWrapper', 'colorMapName': 'css']) {
                sh "./gradlew checkstyleMain $gradleOptions"
            }
        }
        step([$class: 'CheckStylePublisher', canComputeNew: true, defaultEncoding: 'UTF-8', failedTotalAll: '25',
              failedTotalHigh: '2', failedTotalNormal: '25', healthy: '5', pattern: '**/build/gradle/reports/checkstyle/*.xml',
              unHealthy: '100', unstableTotalAll: '10', unstableTotalHigh: '2', unstableTotalNormal: '10'])

    }
}

node {
    stage 'Code Quality'
    def jdkHome = tool 'JDK 8'
    dir('example-app') {
        unstash 'example-app buildFiles'
        withEnv(["JAVA_HOME=$jdkHome"]) {
            // Run the build
            wrap([$class: 'AnsiColorBuildWrapper', 'colorMapName': 'css']) {
                sh "./gradlew findbugsMain $gradleOptions"
            }
        }
        step([$class: 'FindBugsPublisher', canComputeNew: true, defaultEncoding: 'UTF-8', excludePattern: '', failedTotalAll: '8',
              failedTotalHigh: '5', failedTotalNormal: '8', healthy: '5', includePattern: '',
              pattern: '**/build/gradle/reports/findbugs/*.xml', thresholdLimit: 'normal', unHealthy: '50', unstableTotalAll: '5',
              unstableTotalHigh: '2', unstableTotalNormal: '5'])


    }
}

node {
    stage 'JavaDoc'
    def jdkHome = tool 'JDK 8'
    dir('example-app') {
        unstash 'example-app buildFiles'
        withEnv(["JAVA_HOME=$jdkHome"]) {
            // Run the build
            wrap([$class: 'AnsiColorBuildWrapper', 'colorMapName': 'css']) {
                sh "./gradlew javadoc $gradleOptions"
            }
        }
        step([$class: 'WarningsPublisher', canComputeNew: true, canResolveRelativePaths: false,
              consoleParsers: [[parserName: 'JavaDoc Tool']], defaultEncoding: '', excludePattern: '', healthy: '',
              includePattern: '', messagesPattern: '', unHealthy: ''])

        step([$class: 'JavadocArchiver', javadocDir: 'build/gradle/docs/javadoc', keepAll: false])

        step([$class: 'AnalysisPublisher', canComputeNew: true, defaultEncoding: '',
              healthy: '', pmdActivated: false, unHealthy: ''])

        step([$class: 'GitHubCommitStatusSetter', errorHandlers: [[$class: 'ShallowAnyErrorHandler']]])
    }

}

if(currentBuild.result == 'FAILURE') {
    mail to: "${env.CHANGE_AUTHOR_EMAIL}",
        subject: "Job '${env.JOB_NAME}' (${env.BUILD_NUMBER}) failed",
        body: "Please go to ${env.BUILD_URL} and review the failure."
} else if(currentBuild.result == 'SUCCESS' && currentBuild?.previousBuild?.result != 'SUCCESS') {
    slackSend color: 'good', message: "${env.JOB_NAME} - #${env.BUILD_NUMBER} is back to normal."
}


@NonCPS
def getAppVersion(String text)
{
    def matcher = text =~ /app_version=(.+)/
    return matcher ? matcher[0][1] : '0.0'
}

@NonCPS
def getAppName(String text)
{
    def matcher = text =~ /app_name=(.+)/
    return matcher ? matcher[0][1] : 'App'
}
