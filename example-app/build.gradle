import com.proteusframework.build.GitInfo

buildscript {
    final buildRepoURL = "${repo_venture_tech_url}/${repo_venture_tech_key}"
    repositories {
        if(hasLocalRepo){ maven { url = local_repo } }
        maven {
            credentials {
                username "${repo_venturetech_username}"
                password "${repo_venturetech_password?:''}"
            }
            url buildRepoURL
        }
    }
    dependencies {
        // aspectj-weave plugin for our use of Spring @Configurable
        classpath 'com.i2rd:gradle-aspectj-weave:1.1',
            'org.jfrog.buildinfo:build-info-extractor-gradle:3.1.1'
    }

}
repositories {
    mavenLocal()
    if(hasLocalRepo){ maven { url = local_repo } }
    maven {
        credentials {
            username repo_venturetech_username
            password repo_venturetech_password
        }
        url repoURL
    }
}
GitInfo.populateProject(project)

apply from: 'gradle/plugins.gradle'
apply from: 'gradle/config.gradle'
apply from: 'gradle/dependencies.gradle'
apply from: 'gradle/artifacts.gradle'
apply from: 'gradle/tests.gradle'
apply from: 'gradle/aspectj.gradle'
apply from: 'gradle/publishing.gradle'
apply from: 'gradle/analysis.gradle'
apply from: 'gradle/idea.gradle'

if(name == 'example-app') {
    task createProject(type: com.proteusframework.build.CreateProjectTask)
}

task wrapper(type: Wrapper) {
    group 'Build Setup'
    gradleVersion = '2.7'
}



//noinspection GroovyAssignabilityCheck
configurations.all {
    exclude group: 'org.eclipse.birt.runtime.3_7_1', module: 'org.apache.commons.codec'
    resolutionStrategy {
        eachDependency {DependencyResolveDetails details ->
            if (details.requested.group == 'org.aspectj' && details.requested.name == 'aspectjweaver')
            {
                details.useVersion aspectjVersion
            }
            if (details.requested.group == 'xml-apis')
            {
                details.useVersion '1.4.+'
            }
        }
        // cache dynamic versions for ...
//        cacheDynamicVersionsFor 0, 'seconds'
        // cache changing modules for ...
//        cacheChangingModulesFor 0, 'seconds'
    }
}


